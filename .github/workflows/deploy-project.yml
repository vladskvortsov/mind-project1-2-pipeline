name: Deploy Project
on:
#   workflow_call:
    # secrets:
    #     AWS_ACCESS_KEY_ID:
    #       required: true
    #     AWS_SECRET_ACCESS_KEY:
    #       required: true
    #     AWS_REGION: 
    #       required: true
    #     AWS_S3_BUCKET_NAME:
    #       required: true
    #     AWS_ACCOUNT_ID: 
    #       required: true

  workflow_dispatch:
  # push:
  #   branches:
  #     - main
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
jobs:
  create-tfstate-bucket:
    uses: ./.github/workflows/create-tfstate-bucket.yml
    secrets:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        
  deploy-project:
    runs-on: ubuntu-latest 
    defaults:
      run:
        working-directory: ./terraform
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - uses: actions/checkout@v4
    - uses: hashicorp/setup-terraform@v3

    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform init
      id: init
      run: terraform init

    - name: Terraform validate
      id: validate
      run: terraform validate

    - name: Terraform plan
      id: plan
      run: terraform plan
    #   continue-on-error: true
    
    - run: echo ${{ steps.plan.outcome }}
    - run: echo ${{ steps.plan.outputs.stdout }}
    - run: echo ${{ steps.plan.outputs.stderr }}
    - run: echo ${{ steps.plan.outputs.exitcode }}

    - name: Terraform apply
      id: apply
      run: terraform plan apply --auto-approve



# - uses: actions/github-script@v7
#   if: github.event_name == 'pull_request'
#   env:
#     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
#   with:
#     github-token: ${{ secrets.GITHUB_TOKEN }}
#     script: |
#       const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
#       #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
#       #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
#       <details><summary>Validation Output</summary>

#       \`\`\`\n
#       ${{ steps.validate.outputs.stdout }}
#       \`\`\`

#       </details>

#       #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

#       <details><summary>Show Plan</summary>

#       \`\`\`\n
#       ${process.env.PLAN}
#       \`\`\`

#       </details>

#       *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

#       github.rest.issues.createComment({
#         issue_number: context.issue.number,
#         owner: context.repo.owner,
#         repo: context.repo.repo,
#         body: output
#       })